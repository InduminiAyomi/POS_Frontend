{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/home/induminid/Documents/miniproject/front-end/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nfunction round(method, input, precision) {\n  if (typeof input !== 'number') {\n    throw new TypeError('Expected value to be a number');\n  }\n\n  if (!Number.isInteger(precision)) {\n    throw new TypeError('Expected precision to be an integer');\n  }\n\n  var isRoundingAndNegative = method === 'round' && input < 0;\n\n  if (isRoundingAndNegative) {\n    input = Math.abs(input);\n  }\n\n  var _$split = \"\".concat(input, \"e\").split('e'),\n      _$split2 = _slicedToArray(_$split, 2),\n      number = _$split2[0],\n      exponent = _$split2[1];\n\n  var ret = Math[method](\"\".concat(number, \"e\").concat(Number(exponent) + precision));\n\n  var _$split3 = \"\".concat(ret, \"e\").split('e');\n\n  var _$split4 = _slicedToArray(_$split3, 2);\n\n  number = _$split4[0];\n  exponent = _$split4[1];\n  ret = Number(\"\".concat(number, \"e\").concat(Number(exponent) - precision));\n\n  if (isRoundingAndNegative) {\n    ret = -ret;\n  }\n\n  return ret;\n}\n\nmodule.exports = round.bind(null, 'round');\nmodule.exports.up = round.bind(null, 'ceil');\nmodule.exports.down = round.bind(null, 'floor');","map":null,"metadata":{},"sourceType":"script"}